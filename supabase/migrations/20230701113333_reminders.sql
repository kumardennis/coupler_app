create sequence "public"."couples_id_seq";

create sequence "public"."modules_id_seq";

create sequence "public"."statistics_id_seq";

create sequence "public"."users_id_seq";

create table "public"."couples" (
    "id" integer not null default nextval('couples_id_seq'::regclass),
    "partner1_id" integer,
    "partner2_id" integer,
    "created_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "updated_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "anniversary" date,
    "isActive" boolean default true
);


create table "public"."couples_reminder_needs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "reminderNeedId" bigint,
    "coupleId" integer,
    "frequency" integer default 0,
    "timePeriodInDays" integer default 0,
    "userId" integer
);


alter table "public"."couples_reminder_needs" enable row level security;

create table "public"."modules" (
    "id" integer not null default nextval('modules_id_seq'::regclass),
    "name" character varying(100),
    "description" text,
    "created_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "updated_at" timestamp with time zone default CURRENT_TIMESTAMP
);


create table "public"."reminder_needs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "reminderText" text
);


alter table "public"."reminder_needs" enable row level security;

create table "public"."reminders_surveys" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "coupleId" integer,
    "score" integer default 0,
    "userId" integer
);


alter table "public"."reminders_surveys" enable row level security;

create table "public"."statistics" (
    "id" integer not null default nextval('statistics_id_seq'::regclass),
    "couple_id" integer,
    "data" json,
    "created_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "updated_at" timestamp with time zone default CURRENT_TIMESTAMP
);


create table "public"."users" (
    "id" integer not null default nextval('users_id_seq'::regclass),
    "name" character varying(100),
    "created_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "updated_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "firstName" text,
    "lastName" text,
    "userUid" uuid,
    "profileImage" character varying,
    "birthday" date
);


alter table "public"."users" enable row level security;

alter sequence "public"."couples_id_seq" owned by "public"."couples"."id";

alter sequence "public"."modules_id_seq" owned by "public"."modules"."id";

alter sequence "public"."statistics_id_seq" owned by "public"."statistics"."id";

alter sequence "public"."users_id_seq" owned by "public"."users"."id";

CREATE UNIQUE INDEX couples_pkey ON public.couples USING btree (id);

CREATE UNIQUE INDEX couples_reminder_needs_pkey ON public.couples_reminder_needs USING btree (id);

CREATE UNIQUE INDEX modules_pkey ON public.modules USING btree (id);

CREATE UNIQUE INDEX reminder_needs_pkey ON public.reminder_needs USING btree (id);

CREATE UNIQUE INDEX reminders_pkey ON public.reminders_surveys USING btree (id);

CREATE UNIQUE INDEX statistics_pkey ON public.statistics USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."couples" add constraint "couples_pkey" PRIMARY KEY using index "couples_pkey";

alter table "public"."couples_reminder_needs" add constraint "couples_reminder_needs_pkey" PRIMARY KEY using index "couples_reminder_needs_pkey";

alter table "public"."modules" add constraint "modules_pkey" PRIMARY KEY using index "modules_pkey";

alter table "public"."reminder_needs" add constraint "reminder_needs_pkey" PRIMARY KEY using index "reminder_needs_pkey";

alter table "public"."reminders_surveys" add constraint "reminders_pkey" PRIMARY KEY using index "reminders_pkey";

alter table "public"."statistics" add constraint "statistics_pkey" PRIMARY KEY using index "statistics_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."couples" add constraint "couples_partner1_id_fkey" FOREIGN KEY (partner1_id) REFERENCES users(id) not valid;

alter table "public"."couples" validate constraint "couples_partner1_id_fkey";

alter table "public"."couples" add constraint "couples_partner2_id_fkey" FOREIGN KEY (partner2_id) REFERENCES users(id) not valid;

alter table "public"."couples" validate constraint "couples_partner2_id_fkey";

alter table "public"."couples_reminder_needs" add constraint "couples_reminder_needs_coupleId_fkey" FOREIGN KEY ("coupleId") REFERENCES couples(id) not valid;

alter table "public"."couples_reminder_needs" validate constraint "couples_reminder_needs_coupleId_fkey";

alter table "public"."couples_reminder_needs" add constraint "couples_reminder_needs_reminderNeedId_fkey" FOREIGN KEY ("reminderNeedId") REFERENCES reminder_needs(id) not valid;

alter table "public"."couples_reminder_needs" validate constraint "couples_reminder_needs_reminderNeedId_fkey";

alter table "public"."couples_reminder_needs" add constraint "couples_reminder_needs_userId_fkey" FOREIGN KEY ("userId") REFERENCES users(id) not valid;

alter table "public"."couples_reminder_needs" validate constraint "couples_reminder_needs_userId_fkey";

alter table "public"."reminders_surveys" add constraint "reminders_surveys_coupleId_fkey" FOREIGN KEY ("coupleId") REFERENCES couples(id) not valid;

alter table "public"."reminders_surveys" validate constraint "reminders_surveys_coupleId_fkey";

alter table "public"."reminders_surveys" add constraint "reminders_surveys_userId_fkey" FOREIGN KEY ("userId") REFERENCES users(id) not valid;

alter table "public"."reminders_surveys" validate constraint "reminders_surveys_userId_fkey";

alter table "public"."statistics" add constraint "statistics_couple_id_fkey" FOREIGN KEY (couple_id) REFERENCES couples(id) not valid;

alter table "public"."statistics" validate constraint "statistics_couple_id_fkey";

alter table "public"."users" add constraint "users_userUid_fkey" FOREIGN KEY ("userUid") REFERENCES auth.users(id) not valid;

alter table "public"."users" validate constraint "users_userUid_fkey";

create policy "Enable insert for authenticated users only"
on "public"."couples_reminder_needs"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."reminder_needs"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."reminders_surveys"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."users"
as permissive
for all
to authenticated
using (true)
with check (true);



