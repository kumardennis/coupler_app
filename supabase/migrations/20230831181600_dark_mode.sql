create sequence "public"."couples_id_seq";

create sequence "public"."modules_id_seq";

create sequence "public"."statistics_id_seq";

create sequence "public"."users_id_seq";

create table "public"."acquainted_questions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "question" text,
    "textContentId" bigint
);


alter table "public"."acquainted_questions" enable row level security;

create table "public"."acquainted_sessions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "coupleId" integer not null,
    "bothPartnersJoined" boolean default false,
    "startTime" timestamp without time zone default now(),
    "endTime" timestamp without time zone,
    "acquaintedQuestionId" bigint not null,
    "whoWillStart" integer,
    "hasStarted" boolean default false,
    "hasEnded" boolean default false,
    "availableSince" date
);


alter table "public"."acquainted_sessions" enable row level security;

create table "public"."acquainted_sessions_surveys" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "acquaintedSurveyId" bigint,
    "acquaintedSessionId" bigint,
    "willMeStart" boolean,
    "speakingDone" boolean default false,
    "assessingDone" boolean default false
);


alter table "public"."acquainted_sessions_surveys" enable row level security;

create table "public"."acquainted_surveys" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "predictedScore" bigint default '0'::bigint,
    "score" bigint default '0'::bigint,
    "coupleId" integer not null,
    "userId" integer not null,
    "acquaintedSessionId" bigint
);


alter table "public"."acquainted_surveys" enable row level security;

create table "public"."couples" (
    "id" integer not null default nextval('couples_id_seq'::regclass),
    "partner1_id" integer,
    "partner2_id" integer,
    "created_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "updated_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "anniversary" date,
    "isActive" boolean default true
);


create table "public"."couples_reminder_needs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "reminderNeedId" bigint,
    "coupleId" integer,
    "frequency" integer default 0,
    "timePeriodInDays" integer default 0,
    "userId" integer
);


alter table "public"."couples_reminder_needs" enable row level security;

create table "public"."locales" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "localeCode" text,
    "localeName" text
);


alter table "public"."locales" enable row level security;

create table "public"."modules" (
    "id" integer not null default nextval('modules_id_seq'::regclass),
    "name" character varying(100),
    "description" text,
    "created_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "updated_at" timestamp with time zone default CURRENT_TIMESTAMP
);


create table "public"."reminder_needs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "reminderText" text
);


alter table "public"."reminder_needs" enable row level security;

create table "public"."reminders_surveys" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "coupleId" integer,
    "score" integer default 0,
    "userId" integer
);


alter table "public"."reminders_surveys" enable row level security;

create table "public"."special_dates" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "coupleId" integer,
    "dateDescription" text,
    "date" date
);


alter table "public"."special_dates" enable row level security;

create table "public"."statistics" (
    "id" integer not null default nextval('statistics_id_seq'::regclass),
    "couple_id" integer,
    "data" json,
    "created_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "updated_at" timestamp with time zone default CURRENT_TIMESTAMP
);


create table "public"."text_content" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "originalText" text,
    "originalLocaleId" bigint default '1'::bigint
);


alter table "public"."text_content" enable row level security;

create table "public"."translations" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "textContentId" bigint,
    "localeId" bigint,
    "translation" text
);


alter table "public"."translations" enable row level security;

create table "public"."user_settings" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "darkMode" boolean default false,
    "blueAccent" boolean default false,
    "userId" integer
);


alter table "public"."user_settings" enable row level security;

create table "public"."users" (
    "id" integer not null default nextval('users_id_seq'::regclass),
    "name" character varying(100),
    "created_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "updated_at" timestamp with time zone default CURRENT_TIMESTAMP,
    "firstName" text,
    "lastName" text,
    "userUid" uuid,
    "profileImage" character varying,
    "birthday" date
);


alter table "public"."users" enable row level security;

alter sequence "public"."couples_id_seq" owned by "public"."couples"."id";

alter sequence "public"."modules_id_seq" owned by "public"."modules"."id";

alter sequence "public"."statistics_id_seq" owned by "public"."statistics"."id";

alter sequence "public"."users_id_seq" owned by "public"."users"."id";

CREATE UNIQUE INDEX acquainted_questions_pkey ON public.acquainted_questions USING btree (id);

CREATE UNIQUE INDEX acquainted_session_survey_pkey ON public.acquainted_sessions_surveys USING btree (id);

CREATE UNIQUE INDEX acquainted_sessions_pkey ON public.acquainted_sessions USING btree (id);

CREATE UNIQUE INDEX acquainted_surveys_pkey ON public.acquainted_surveys USING btree (id);

CREATE UNIQUE INDEX couples_pkey ON public.couples USING btree (id);

CREATE UNIQUE INDEX couples_reminder_needs_pkey ON public.couples_reminder_needs USING btree (id);

CREATE UNIQUE INDEX locales_pkey ON public.locales USING btree (id);

CREATE UNIQUE INDEX modules_pkey ON public.modules USING btree (id);

CREATE UNIQUE INDEX reminder_needs_pkey ON public.reminder_needs USING btree (id);

CREATE UNIQUE INDEX reminders_pkey ON public.reminders_surveys USING btree (id);

CREATE UNIQUE INDEX special_dates_pkey ON public.special_dates USING btree (id);

CREATE UNIQUE INDEX statistics_pkey ON public.statistics USING btree (id);

CREATE UNIQUE INDEX text_content_pkey ON public.text_content USING btree (id);

CREATE UNIQUE INDEX translations_pkey ON public.translations USING btree (id);

CREATE UNIQUE INDEX user_settings_pkey ON public.user_settings USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."acquainted_questions" add constraint "acquainted_questions_pkey" PRIMARY KEY using index "acquainted_questions_pkey";

alter table "public"."acquainted_sessions" add constraint "acquainted_sessions_pkey" PRIMARY KEY using index "acquainted_sessions_pkey";

alter table "public"."acquainted_sessions_surveys" add constraint "acquainted_session_survey_pkey" PRIMARY KEY using index "acquainted_session_survey_pkey";

alter table "public"."acquainted_surveys" add constraint "acquainted_surveys_pkey" PRIMARY KEY using index "acquainted_surveys_pkey";

alter table "public"."couples" add constraint "couples_pkey" PRIMARY KEY using index "couples_pkey";

alter table "public"."couples_reminder_needs" add constraint "couples_reminder_needs_pkey" PRIMARY KEY using index "couples_reminder_needs_pkey";

alter table "public"."locales" add constraint "locales_pkey" PRIMARY KEY using index "locales_pkey";

alter table "public"."modules" add constraint "modules_pkey" PRIMARY KEY using index "modules_pkey";

alter table "public"."reminder_needs" add constraint "reminder_needs_pkey" PRIMARY KEY using index "reminder_needs_pkey";

alter table "public"."reminders_surveys" add constraint "reminders_pkey" PRIMARY KEY using index "reminders_pkey";

alter table "public"."special_dates" add constraint "special_dates_pkey" PRIMARY KEY using index "special_dates_pkey";

alter table "public"."statistics" add constraint "statistics_pkey" PRIMARY KEY using index "statistics_pkey";

alter table "public"."text_content" add constraint "text_content_pkey" PRIMARY KEY using index "text_content_pkey";

alter table "public"."translations" add constraint "translations_pkey" PRIMARY KEY using index "translations_pkey";

alter table "public"."user_settings" add constraint "user_settings_pkey" PRIMARY KEY using index "user_settings_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."acquainted_questions" add constraint "acquainted_questions_textContentId_fkey" FOREIGN KEY ("textContentId") REFERENCES text_content(id) not valid;

alter table "public"."acquainted_questions" validate constraint "acquainted_questions_textContentId_fkey";

alter table "public"."acquainted_sessions" add constraint "acquainted_sessions_acquaintedQuestionId_fkey" FOREIGN KEY ("acquaintedQuestionId") REFERENCES acquainted_questions(id) not valid;

alter table "public"."acquainted_sessions" validate constraint "acquainted_sessions_acquaintedQuestionId_fkey";

alter table "public"."acquainted_sessions" add constraint "acquainted_sessions_coupleId_fkey" FOREIGN KEY ("coupleId") REFERENCES couples(id) not valid;

alter table "public"."acquainted_sessions" validate constraint "acquainted_sessions_coupleId_fkey";

alter table "public"."acquainted_sessions" add constraint "acquainted_sessions_whoWillStart_fkey" FOREIGN KEY ("whoWillStart") REFERENCES users(id) not valid;

alter table "public"."acquainted_sessions" validate constraint "acquainted_sessions_whoWillStart_fkey";

alter table "public"."acquainted_sessions_surveys" add constraint "acquainted_sessions_surveys_acquaintedSessionId_fkey" FOREIGN KEY ("acquaintedSessionId") REFERENCES acquainted_sessions(id) not valid;

alter table "public"."acquainted_sessions_surveys" validate constraint "acquainted_sessions_surveys_acquaintedSessionId_fkey";

alter table "public"."acquainted_sessions_surveys" add constraint "acquainted_sessions_surveys_acquaintedSurveyId_fkey" FOREIGN KEY ("acquaintedSurveyId") REFERENCES acquainted_surveys(id) not valid;

alter table "public"."acquainted_sessions_surveys" validate constraint "acquainted_sessions_surveys_acquaintedSurveyId_fkey";

alter table "public"."acquainted_surveys" add constraint "acquainted_surveys_acquaintedSessionId_fkey" FOREIGN KEY ("acquaintedSessionId") REFERENCES acquainted_sessions(id) not valid;

alter table "public"."acquainted_surveys" validate constraint "acquainted_surveys_acquaintedSessionId_fkey";

alter table "public"."acquainted_surveys" add constraint "acquainted_surveys_coupleId_fkey" FOREIGN KEY ("coupleId") REFERENCES couples(id) not valid;

alter table "public"."acquainted_surveys" validate constraint "acquainted_surveys_coupleId_fkey";

alter table "public"."acquainted_surveys" add constraint "acquainted_surveys_userId_fkey" FOREIGN KEY ("userId") REFERENCES users(id) not valid;

alter table "public"."acquainted_surveys" validate constraint "acquainted_surveys_userId_fkey";

alter table "public"."couples" add constraint "couples_partner1_id_fkey" FOREIGN KEY (partner1_id) REFERENCES users(id) not valid;

alter table "public"."couples" validate constraint "couples_partner1_id_fkey";

alter table "public"."couples" add constraint "couples_partner2_id_fkey" FOREIGN KEY (partner2_id) REFERENCES users(id) not valid;

alter table "public"."couples" validate constraint "couples_partner2_id_fkey";

alter table "public"."couples_reminder_needs" add constraint "couples_reminder_needs_coupleId_fkey" FOREIGN KEY ("coupleId") REFERENCES couples(id) not valid;

alter table "public"."couples_reminder_needs" validate constraint "couples_reminder_needs_coupleId_fkey";

alter table "public"."couples_reminder_needs" add constraint "couples_reminder_needs_reminderNeedId_fkey" FOREIGN KEY ("reminderNeedId") REFERENCES reminder_needs(id) not valid;

alter table "public"."couples_reminder_needs" validate constraint "couples_reminder_needs_reminderNeedId_fkey";

alter table "public"."couples_reminder_needs" add constraint "couples_reminder_needs_userId_fkey" FOREIGN KEY ("userId") REFERENCES users(id) not valid;

alter table "public"."couples_reminder_needs" validate constraint "couples_reminder_needs_userId_fkey";

alter table "public"."reminders_surveys" add constraint "reminders_surveys_coupleId_fkey" FOREIGN KEY ("coupleId") REFERENCES couples(id) not valid;

alter table "public"."reminders_surveys" validate constraint "reminders_surveys_coupleId_fkey";

alter table "public"."reminders_surveys" add constraint "reminders_surveys_userId_fkey" FOREIGN KEY ("userId") REFERENCES users(id) not valid;

alter table "public"."reminders_surveys" validate constraint "reminders_surveys_userId_fkey";

alter table "public"."special_dates" add constraint "special_dates_coupleId_fkey" FOREIGN KEY ("coupleId") REFERENCES couples(id) not valid;

alter table "public"."special_dates" validate constraint "special_dates_coupleId_fkey";

alter table "public"."statistics" add constraint "statistics_couple_id_fkey" FOREIGN KEY (couple_id) REFERENCES couples(id) not valid;

alter table "public"."statistics" validate constraint "statistics_couple_id_fkey";

alter table "public"."translations" add constraint "translations_localeId_fkey" FOREIGN KEY ("localeId") REFERENCES locales(id) not valid;

alter table "public"."translations" validate constraint "translations_localeId_fkey";

alter table "public"."translations" add constraint "translations_textContentId_fkey" FOREIGN KEY ("textContentId") REFERENCES text_content(id) not valid;

alter table "public"."translations" validate constraint "translations_textContentId_fkey";

alter table "public"."user_settings" add constraint "user_settings_userId_fkey" FOREIGN KEY ("userId") REFERENCES users(id) not valid;

alter table "public"."user_settings" validate constraint "user_settings_userId_fkey";

alter table "public"."users" add constraint "users_userUid_fkey" FOREIGN KEY ("userUid") REFERENCES auth.users(id) not valid;

alter table "public"."users" validate constraint "users_userUid_fkey";

create policy "Enable read access for all users"
on "public"."acquainted_questions"
as permissive
for all
to public
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."acquainted_sessions"
as permissive
for all
to public
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."acquainted_sessions_surveys"
as permissive
for all
to public
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."acquainted_surveys"
as permissive
for all
to public
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."couples_reminder_needs"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."reminder_needs"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."reminders_surveys"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."special_dates"
as permissive
for all
to public
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."text_content"
as permissive
for all
to public
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."translations"
as permissive
for all
to public
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."user_settings"
as permissive
for all
to public
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."users"
as permissive
for all
to authenticated
using (true)
with check (true);



