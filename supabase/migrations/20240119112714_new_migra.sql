create table "public"."couples_daily_questions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "userId" integer,
    "dailyQuestionId" bigint,
    "selectedAnswer" text not null,
    "coupleId" integer
);


alter table "public"."couples_daily_questions" enable row level security;

create table "public"."daily_questions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "question" bigint,
    "option1" bigint,
    "option2" bigint,
    "option3" bigint,
    "option4" bigint
);


alter table "public"."daily_questions" enable row level security;

create table "public"."daily_quotes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "textContentId" bigint
);


alter table "public"."daily_quotes" enable row level security;

alter table "public"."text_content" add column "et" text;

CREATE UNIQUE INDEX daily_questions_pkey ON public.daily_questions USING btree (id);

CREATE UNIQUE INDEX daily_quotes_pkey ON public.daily_quotes USING btree (id);

CREATE UNIQUE INDEX users_daily_questions_pkey ON public.couples_daily_questions USING btree (id);

alter table "public"."couples_daily_questions" add constraint "users_daily_questions_pkey" PRIMARY KEY using index "users_daily_questions_pkey";

alter table "public"."daily_questions" add constraint "daily_questions_pkey" PRIMARY KEY using index "daily_questions_pkey";

alter table "public"."daily_quotes" add constraint "daily_quotes_pkey" PRIMARY KEY using index "daily_quotes_pkey";

alter table "public"."couples_daily_questions" add constraint "couples_daily_questions_coupleId_fkey" FOREIGN KEY ("coupleId") REFERENCES couples(id) not valid;

alter table "public"."couples_daily_questions" validate constraint "couples_daily_questions_coupleId_fkey";

alter table "public"."couples_daily_questions" add constraint "couples_daily_questions_dailyQuestionId_fkey" FOREIGN KEY ("dailyQuestionId") REFERENCES daily_questions(id) not valid;

alter table "public"."couples_daily_questions" validate constraint "couples_daily_questions_dailyQuestionId_fkey";

alter table "public"."couples_daily_questions" add constraint "couples_daily_questions_userId_fkey" FOREIGN KEY ("userId") REFERENCES users(id) not valid;

alter table "public"."couples_daily_questions" validate constraint "couples_daily_questions_userId_fkey";

alter table "public"."daily_questions" add constraint "daily_questions_option1_fkey" FOREIGN KEY (option1) REFERENCES text_content(id) not valid;

alter table "public"."daily_questions" validate constraint "daily_questions_option1_fkey";

alter table "public"."daily_questions" add constraint "daily_questions_option2_fkey" FOREIGN KEY (option2) REFERENCES text_content(id) not valid;

alter table "public"."daily_questions" validate constraint "daily_questions_option2_fkey";

alter table "public"."daily_questions" add constraint "daily_questions_option3_fkey" FOREIGN KEY (option3) REFERENCES text_content(id) not valid;

alter table "public"."daily_questions" validate constraint "daily_questions_option3_fkey";

alter table "public"."daily_questions" add constraint "daily_questions_option4_fkey" FOREIGN KEY (option4) REFERENCES text_content(id) not valid;

alter table "public"."daily_questions" validate constraint "daily_questions_option4_fkey";

alter table "public"."daily_questions" add constraint "daily_questions_question_fkey" FOREIGN KEY (question) REFERENCES text_content(id) not valid;

alter table "public"."daily_questions" validate constraint "daily_questions_question_fkey";

alter table "public"."daily_quotes" add constraint "daily_quotes_textContentId_fkey" FOREIGN KEY ("textContentId") REFERENCES text_content(id) not valid;

alter table "public"."daily_quotes" validate constraint "daily_quotes_textContentId_fkey";

create policy "Enable read access for all users"
on "public"."couples_daily_questions"
as permissive
for all
to anon, authenticated
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."daily_questions"
as permissive
for all
to anon, authenticated
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."daily_quotes"
as permissive
for all
to anon, authenticated
using (true)
with check (true);



